trigger:
    branches:
      include:        
        - develop

pool:
  vmImage: "windows-latest"

variables: 
  BuildConfiguration: 'release'
  # nombre del archivo csproj
  name-project: "trifenix.connect.mdm"

  
# github ejecuta este build, para validar y ejecutar,
# es decir, dos veces
# esta instrucción asigna que no se ejecute en el pull request (para validar).
# sino, que solo se ejecute al modificar la rama.
pr: none
  
steps:

  # generamos versión del paquete.
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        dotnet tool install trifenix.versions.console -g
        $currentVersion = trifenix-versions update $(trifenix-versions) --token $(script-token) --user trifenix --email devops@trifenix.io --branch develop --name trifenix.connect.mdm --ktype nuget --build $(Build.BuildId)        
        $setVersion = '##vso[task.setvariable variable=version;]' + $currentVersion
        Write-Host $setVersion
    displayName: generando variable version con TRIFENIX VERSIONS

  - task: CmdLine@2
    inputs:
      script: |
        echo $(version) $(draft-feed)
    displayName: mostrando variable en el set.

  # configuración sonarqube  
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'AGROFENIX-mdm'
      scannerMode: 'MSBuild'
      projectKey: 'AGROFENIX-mdm'
      projectName: 'AGROFENIX-mdm'
      projectVersion: '$(version)'
      extraProperties: 'sonar.branch.name=develop'
    displayName: preparación sonarqube
  
  
  #toma todos los proyectos que existan además de quien tiene el nuget.
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'select'
      vstsFeed: '$(draft-feed)'      
      versioningScheme: byBuildNumber
    displayName: restore dotnet

  
  - task: CmdLine@2
    inputs:
      script: |
        echo $(version)
    displayName: mostrando variable en el set.

  - task: DotNetCoreCLI@2    
    inputs: 
      command: pack
      packagesToPack: '**/$(name-project).csproj'       
      arguments: '--configuration $(BuildConfiguration) /p:Version=$(version)' 
      versioningScheme: byEnvVar 
      versionEnvVar: SemVer
    displayName: 'dotnet pack' 
    
  # especial : dotnet pack $(name-project).csproj --configuration $(BuildConfiguration) /p:Version=%var% --output $(Build.ArtifactStagingDirectory)
  - task: SonarQubeAnalyze@4
  - task: SonarQubePublish@4
    inputs:
      pollingTimeoutSec: '300'
  # publica paquete para publicar.
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: drop
      publishLocation: 'container'
    displayName: "publish nuget"