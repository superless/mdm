trigger:
    branches:
      include:        
        - develop

pool:
  vmImage: "windows-latest"

variables: 
  BuildConfiguration: 'release'
  # nombre del archivo csproj
  name-project: "trifenix.connect.mdm"

  
# github ejecuta este build, para validar y ejecutar,
# es decir, dos veces
# esta instrucci칩n asigna que no se ejecute en el pull request (para validar).
# sino, que solo se ejecute al modificar la rama.
pr: none
  
steps:

  
  # - task: SonarQubePrepare@4
  #   inputs:
  #     SonarQube: 'AGROFENIX-mdm'
  #     scannerMode: 'MSBuild'
  #     projectKey: 'AGROFENIX-mdm'
  #     projectName: 'AGROFENIX-mdm'
  #     projectVersion: '1.1'
  #     extraProperties: 'sonar.branch.name=develop'
  
  
  # toma todos los proyectos que existan adem치s de quien tiene el nuget.
  # - task: DotNetCoreCLI@2
  #   inputs:
  #     command: 'restore'
  #     projects: '**/*.csproj'
  #     feedsToUse: 'select'
  #     vstsFeed: '$(default-feed)'      
  #     versioningScheme: byBuildNumber

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        dotnet tool install trifenix.versions.console -g
        $currentVersion = trifenix-versions update $(trifenix-versions) --token $(script-token) --user trifenix --email devops@trifenix.io --branch develop --name trifenix.connect.mdm --ktype nuget --build $(Build.BuildId)        
        $setVersion = '##vso[task.setvariable variable=version;]' + currentVersion
        Write-Host $setVersion
  - task: CmdLine@2
    inputs:
      script: |
        ECHO $(version)
        
        
    displayName: "Generando paquete con la versi칩n"
  - task: CmdLine@2
    inputs:
      script: |
        ECHO %var%
        ls
        type version.txt

        
    displayName: "Generando paquete con la versi칩n"
  # especial : dotnet pack $(name-project).csproj --configuration $(BuildConfiguration) /p:Version=%var% --output $(Build.ArtifactStagingDirectory)
  # - task: SonarQubeAnalyze@4
  # - task: SonarQubePublish@4
  #   inputs:
  #     pollingTimeoutSec: '300'
  # # publica paquete para publicar.
  # - task: PublishBuildArtifacts@1
  #   inputs:
  #     pathtoPublish: "$(Build.ArtifactStagingDirectory)"
  #     artifactName: drop
  #     publishLocation: 'container'
  #   displayName: "publish nuget"