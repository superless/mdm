# termine, parte 1.

trigger:
    branches:
      include:        
        - master  
pool:
  vmImage: "windows-latest"

variables: 
  BuildConfiguration: 'release'
  # nombre del archivo csproj
  name-project: "trifenix.connect.mdm"

  
# github ejecuta este build, para validar y ejecutar,
# es decir, dos veces
# esta instrucción asigna que no se ejecute en el pull request (para validar).
# sino, que solo se ejecute al modificar la rama.
pr: none
  
steps:

  - task: CmdLine@2
    inputs:
      script: |
        dotnet tool install trifenix.versions.console -g
        FOR /F "tokens=* USEBACKQ" %%F IN (`trifenix-versions update https://github.com/trifenix/versions.git --token 615a09a64ba1d25ecaa2637d4beea84aa81f43af --user devops --email devops@trifenix.io --branch master --name trifenix.connect.mdm --ktype nuget --build $(Build.BuildId)`) DO (
          SET var=%%F
        )
        ECHO %var%
        ECHO "##vso[task.setvariable variable=version;]%var%"
        
        ECHO $(version)
    displayName: "instalando generador de versiones de trifenix"
  
  - task: CmdLine@2
    inputs:
      script: |        
        ECHO %var%
        
    displayName: "echo var"
  
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'AGROFENIX-mdm'
      scannerMode: 'MSBuild'
      projectKey: 'AGROFENIX-mdm'
      projectName: 'AGROFENIX-mdm'
  
  
  # toma todos los proyectos que existan además de quien tiene el nuget.
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'select'
      vstsFeed: '$(default-feed)'      
      versioningScheme: byBuildNumber

  

  # genera paquete usando la versión proporcionada por gitversion
  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack' 
    inputs: 
      command: pack
      packagesToPack: '**/$(name-project).csproj'       
      arguments: '--configuration $(BuildConfiguration) /p:Version=$(version)' 
      versioningScheme: byEnvVar 
      versionEnvVar: SemVer
  - task: SonarQubeAnalyze@4
  - task: SonarQubePublish@4
    inputs:
      pollingTimeoutSec: '300'
  # publica paquete para publicar.
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: drop
      publishLocation: 'container'
    displayName: "publish nuget"